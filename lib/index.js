// Generated by CoffeeScript 1.6.3
var Index, clone, fs, jade, path;

(require('source-map-support')).install({
  handleUncaughtExceptions: false
});

fs = require('fs');

path = require('path');

jade = require('jade');

clone = require('regexp-clone');

module.exports = new (Index = (function() {
  var has_include, match_all;

  function Index() {}

  Index.prototype.config = null;

  Index.prototype.type = 'template';

  Index.prototype.name = 'jade';

  Index.prototype.output = 'js';

  Index.prototype.ext = /\.jade$/m;

  Index.prototype.exts = ['.jade'];

  Index.prototype.partials = true;

  has_include = /^\s*(?:(?!\/\/).?)include\s/m;

  match_all = /^\s*(?:(?!\/\/).?)include\s+(\S+)/mg;

  Index.prototype.is_partial = function(filepath) {
    return /^_/m.test(path.basename(filepath));
  };

  Index.prototype.compile = function(filepath, source, debug, error, done) {
    var approach, buffer, client, compiled, err;
    client = this.config.output.html == null;
    approach = client ? 'compile' : 'render';
    try {
      compiled = jade[approach](source, {
        filename: filepath,
        client: client,
        compileDebug: debug,
        pretty: debug
      });
    } catch (_error) {
      err = _error;
      error(err);
      return done('', null);
    }
    buffer = compiled;
    if (client) {
      buffer = 'module.exports = ' + buffer;
    }
    return done(buffer, null);
  };

  Index.prototype.resolve_dependents = function(filepath, files) {
    var all, dependents, dirpath, each, has, include, match, name, sub, _i, _len, _ref;
    dependents = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      each = files[_i];
      _ref = [clone(has_include), clone(match_all)], has = _ref[0], all = _ref[1];
      if (!has.test(each.raw)) {
        continue;
      }
      dirpath = path.dirname(each.filepath);
      name = path.basename(each.filepath);
      while ((match = all.exec(each.raw)) != null) {
        include = match[1];
        include = include.replace(this.ext, '') + '.jade';
        include = path.join(dirpath, include);
        if (include === filepath) {
          if (!this.is_partial(name)) {
            dependents.push(each);
          } else {
            sub = this.resolve_dependents(each.filepath, files);
            dependents = dependents.concat(sub);
          }
        }
      }
    }
    return dependents;
  };

  Index.prototype.fetch_helpers = function() {
    var filepath;
    filepath = path.join(__dirname, '..', 'node_modules', 'jade');
    filepath = path.join(filepath, 'runtime.js');
    return fs.readFileSync(filepath, 'utf-8');
  };

  return Index;

})());

/*
//@ sourceMappingURL=index.map
*/
